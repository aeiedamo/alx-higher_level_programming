The "7-base_geometry" module
============================

using "BaseGeometry" methods
----------------------------

Import the module and define an object
  >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
  >>> bg = BaseGeometry()

Test with positive integers:
  >>> bg.integer_validator("my_int", 12)
  >>> bg.integer_validator("width", 89)
  >>> bg.integer_validator("int#2", 12)

Test Negative integer:
  >>> bg.integer_validator("int#2", -12)
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    File "/home/alaa/Code/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 26, in integer_validator
      raise ValueError("{:s} must be greater than 0".format(name))
  ValueError: int#2 must be greater than 0

Test more than 1 integer:
  >>> bg.integer_validator("int#2", -12, -10)
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
  TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given

Test with None:
  >>> bg.integer_validator("int#2", None)
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    File "/home/alaa/Code/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 24, in integer_validator
      raise TypeError("{:s} must be an integer".format(name))
  TypeError: int#2 must be an integer

Test with inifinity:
  >>> bg.integer_validator("int#2", int('inf'))
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
  ValueError: invalid literal for int() with base 10: 'inf'
